import com.datamelt.db.RuleGroup;
import com.datamelt.db.RuleSubgroup;
import com.datamelt.db.History;
import com.datamelt.db.DbCollections;
import java.text.ParseException;

writeaction="true"; 
if(user==null)
{
	templatename="login.vm";
}
else
{
	cancelled = request.getParameter("submit");
	id=Long.parseLong(request.getParameter("id"));
	mode = request.getParameter("mode");
	context.put("mode", mode);
	if(mode!=null && mode.equals("copy"))
	{
		copyFromId=Long.parseLong(request.getParameter("copyid"));
	}
	context.put("copyid", copyFromId);
	
	Project project = new Project();
	project.connection = connection;
	project.id = Long.parseLong(request.getParameter("projectid"));
	project.load();
	context.put("project", project);
	
	if(cancelled.equals("save"))
	{
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

		RuleGroup rulegroupNew = new RuleGroup();	
		rulegroupNew.connection = connection;
		rulegroupNew.name=request.getParameter("name");
		rulegroupNew.description=request.getParameter("description");
		rulegroupNew.validFrom=request.getParameter("valid_from");
		rulegroupNew.validUntil=request.getParameter("valid_until");
		rulegroupNew.projectId = Long.parseLong(request.getParameter("projectid"));
		
		boolean validFromFormatOk = false;
		boolean validUntilFormatOk = false;
		try
		{
        	sdf.parse(rulegroupNew.validFrom);
        	validFromFormatOk = true;
     	}
     	catch(ParseException e)
     	{
         	validFromFormatOk = false;
     	}
     	try
		{
        	sdf.parse(rulegroupNew.validUntil);
        	validUntilFormatOk = true;
     	}
     	catch(ParseException e)
     	{
          validUntilFormatOk = false;
     	}
     	
     	
		RuleGroup rulegroup = new RuleGroup();
		rulegroup.setConnection(connection);
		if(id>0)
		{
			rulegroupNew.setId(id);
			rulegroup.setId(id);
			rulegroup.load();
			if(rulegroupNew.name.length()==0 )
			{
				infomessage.type="error";
				infomessage.text="Name must be specified.";
			}
			else if(!rulegroupNew.name.equals(rulegroup.name) && rulegroupNew.exist(rulegroupNew.name))
			{
				infomessage.type="error";
				infomessage.text="Rule Group already exists.";
			}
			else if(rulegroupNew.validFrom==null || rulegroupNew.validFrom.equals("") || rulegroupNew.validUntil==null || rulegroupNew.validUntil.equals(""))
			{
				infomessage.type="error";
				infomessage.text="Valid From and Valid Until can not be empty.";
			}
			else if(validFromFormatOk==false)
			{
				infomessage.type="error";
				infomessage.text="Valid From format invalid.";
			}
			else if(validUntilFormatOk==false)
			{
				infomessage.type="error";
				infomessage.text="Valid Until format invalid.";
			}
			else 
			{
				rulegroupNew.lastUpdateUser.id = user.id;
				rulegroupNew.update(connection.getPreparedStatement(RuleGroup.UPDATE_SQL),project,user);
				
				History history = new History();
				history.connection = connection;
				history.user = user;
				history.type = "rulegroup";
				history.typeId = rulegroupNew.id;
				history.parent1 = project.id;
				history.insert(connection.getPreparedStatement(History.INSERT_SQL));
				
				infomessage.text="Rule Group updated.";
			}
		}
		else
		{
			if(rulegroupNew.name.length()==0)
			{
				infomessage.type="error";
				infomessage.text="Name must be specified.";
			}
			else if(rulegroupNew.exist(rulegroupNew.name))
			{
				infomessage.type="error";
				infomessage.text="RuleGroup already exists.";
			}
			else if(rulegroupNew.validFrom==null || rulegroupNew.validFrom.equals("") || rulegroupNew.validUntil==null || rulegroupNew.validUntil.equals(""))
			{
				infomessage.type="error";
				infomessage.text="Valid From and Valid Until can not be empty.";
			}
			else if(validFromFormatOk==false)
			{
				infomessage.type="error";
				infomessage.text="Valid From format invalid.";
			}
			else if(validUntilFormatOk==false)
			{
				infomessage.type="error";
				infomessage.text="Valid Until format invalid.";
			}
			else
			{
				rulegroupNew.lastUpdateUser.id = user.id;
				rulegroupNew.insert(connection.getPreparedStatement(RuleGroup.INSERT_SQL),project,user);
				
				if(mode.equals("copy"))
				{
					RuleGroup rulegroupCopy = new RuleGroup();
					rulegroupCopy.connection = connection;
					rulegroupCopy.id = copyFromId;
					rulegroupCopy.load();
					rulegroupCopy.loadRuleSubgroups();
					rulegroupCopy.loadRuleGroupActions();
					for(int i=0;i<rulegroupCopy.ruleSubgroups.size();i++)
					{
						RuleSubgroup subgroup = rulegroupCopy.ruleSubgroups.get(i);
						subgroup.rulegroupId = rulegroupNew.id;
						subgroup.lastUpdateUser.id = user.id;
						subgroup.insert(connection.getPreparedStatement(RuleSubgroup.INSERT_SQL),project,user);
						
						for(int f=0;f<subgroup.rules.size();f++)
						{
							Rule rule = subgroup.rules.get(f);
							rule.rulesubgroupId = subgroup.id;
							rule.lastUpdateUser.id = user.id;
							rule.insert(connection.getPreparedStatement(Rule.INSERT_SQL),project,user);
						}
					}
					
					for(int f=0;f<rulegroupCopy.actions.size();f++)
					{
						RuleGroupAction action = rulegroupCopy.actions.get(f);
						action.rulegroupId = rulegroupNew.id;
						action.lastUpdateUser.id = user.id;
						action.insert(connection.getPreparedStatement(RuleGroupAction.INSERT_SQL),project,user);
					}
					infomessage.text="Rule Group added. Subgroups, rules and actions copied.";
				}
				else
				{
					RuleSubgroup subgroup = new RuleSubgroup();
					subgroup.rulegroupId = rulegroupNew.id;
					subgroup.name= "subgroup_1";
					subgroup.description= "subgroup 1";
					subgroup.intergroupOperator="and";
					subgroup.ruleOperator="and";
					subgroup.connection = connection;
					subgroup.lastUpdateUser.id = user.id;
					subgroup.insert(connection.getPreparedStatement(RuleSubgroup.INSERT_SQL),project,user);
					
					infomessage.text="Rule Group and one Subgroup added.";
				}
				
				History history = new History();
				history.connection = connection;
				history.user = user;
				history.type = "rulegroup";
				history.typeId = rulegroupNew.id;
				history.parent1 = project.id;
				history.insert(connection.getPreparedStatement(History.INSERT_SQL));
			}
		}
		
		rulegroupNew.load();
		context.put("rulegroup",rulegroupNew);
		templatename="editrulegroup.vm";
		

	}
	else
	{
		ArrayList list = DbCollections.getAllRuleGroups(connection,project.Id);
		context.put("rulegroups",list);
		
		templatename="listrulegroups.vm";
	}
	

}