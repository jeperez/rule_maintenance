import com.datamelt.db.Project;
import com.datamelt.db.DbCollections;
import javax.servlet.http.Part;
import java.io.File;
import com.datamelt.util.PDITransformation;
import org.pentaho.di.trans.step.StepMeta;

writeaction="true"; 
if(user==null)
{
	templatename="login.vm";
}
else
{
	cancelled= request.getParameter("submit");
	stepname= request.getParameter("stepname");
	stepsOk=true;
	id=Long.parseLong(request.getParameter("id"));
	if(cancelled.equals("save"))
	{
		Part filePart;
		filePart = request.getPart("transformation");
		String fileName;
		String contentDisp = filePart.getHeader("content-disposition");
		String[] items = contentDisp.split(";");
		for (int i=0;i<items.length;i++) 
		{	
			String s = items[i];
	    	if (s.trim().startsWith("filename")) 
	    	{
	        	fileName= s.substring(s.indexOf("=") + 2, s.length()-1);
	    	}
		}
	
		Project project = new Project();
		project.connection = connection;
		project.setId(id);
		project.load();
		
		String fullfilename = uploadstransformationspath + "/" + project.id + "/" + fileName;
		
		if(filePart!=null && fileName!=null && !fileName.equals(""))
		{
			String existingfilename= uploadstransformationspath + "/" + project.id + "/" + project.transformationFilename;
			
			File dir = new File(uploadstransformationspath + "/" + project.id);
			dir.mkdirs();
			
			File file = new File(existingfilename);
			if(file.exists())
			{
				file.delete();
			}
		
			project.setTransformationFilename(fileName);
			filePart.write(fullfilename);
			
			PDITransformation trans = new PDITransformation(fullfilename);
			List steps = trans.getRuleEngineSteps();
			if(steps!=null && steps.size()==0)
			{
				project.transformationStepname = null;
			}
			else if(steps!=null && steps.size()>=1)
			{
				project.transformationStepname = steps.get(0).name;
			}
			context.put("steps",steps);
		}
		else
		{
			if(project.getTransformationFilename()!=null)
			{
				PDITransformation trans = new PDITransformation(uploadstransformationspath + "/" + project.id + "/" + project.transformationFilename);
				List steps = trans.getRuleEngineSteps();
				if(steps!=null && steps.size()==0)
				{
					project.transformationStepname = null;
				}
				else if(steps!=null && steps.size()==1)
				{
					project.transformationStepname = steps.get(0).name;
				}
				else if(steps!=null && steps.size()>1 && stepname==null)
				{
					stepsOk=false;
					project.transformationStepname = null;
					infomessage.type="error";
					infomessage.text="Multiple Rule Engine steps existing for the given Transformation. Select one.";
				}
				else if(stepname!=null)
				{
					project.transformationStepname = stepname;
				}
				context.put("steps",steps);
			}
			else
			{
				stepsOk=false;
				infomessage.type="error";
				infomessage.text="The filename of the Transformation must be specified.";
			}
		}
		project.lastUpdateUser.id = user.id;
		if(stepsOk)
		{
			project.update(connection.getPreparedStatement(Project.UPDATE_SQL),user);
			project.load();
			infomessage.text="Project updated.";
		}

		context.put("project",project);
		templatename="editprojecttransformation.vm";
	}
	else if(cancelled.equals("remove"))
	{
		Project project = new Project();
		project.connection = connection;
		project.setId(id);
		project.load();
		//System.out.println("trans upload path: " + uploadstransformationspath);
		String existingfilename= uploadstransformationspath + "/" + project.id + "/" + project.transformationFilename;
		File file = new File(existingfilename);
		if(file.exists())
		{
			file.delete();
			
		}
		File dir = new File(uploadstransformationspath + "/" + project.id);
		if(dir.exists())
		{
			dir.delete();
		}
		
		if(project.transformationFilename!=null)
		{
			project.transformationStepname = null;
			project.transformationFilename=null;
			project.update(connection.getPreparedStatement(Project.UPDATE_SQL),user);
		}
		
		ArrayList list;
		list = DbCollections.getAllProjects(connection, user);
		context.put("projects",list);
		templatename="listprojects.vm";
	}
	else
	{
		ArrayList list;
		list = DbCollections.getAllProjects(connection, user);
		context.put("projects",list);
		templatename="listprojects.vm";
	}
	

}