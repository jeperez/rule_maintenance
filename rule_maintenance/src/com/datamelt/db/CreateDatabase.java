/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */ 
package com.datamelt.db;

/**
 * Contains the sql code to create the database tables and fields required
 * by this web application.
 * 
 * When the web application is started the first time or when the database configuration
 * was changed, this class is used.
 * 
 * @author uwe geercken
 *
 */
public class CreateDatabase
{
	public static final String TABLE_ACTION = "`action`";
	public static final String TABLE_ACTION_METHOD = "`action_method`";
	public static final String TABLE_CHECK = "`check`";
	public static final String TABLE_CHECK_METHOD = "`check_method`";
	public static final String TABLE_REFERENCE_FIELDS = "`reference_fields`";
	public static final String TABLE_ACTIVITY_LOG = "`activity_log`";
	public static final String TABLE_GROUPS = "`groups`";
	public static final String TABLE_HISTORY = "`history`";
	public static final String TABLE_PROJECT = "`project`";
	public static final String TABLE_RULE = "`rule`";
	public static final String TABLE_RULEGROUP = "`rulegroup`";
	public static final String TABLE_RULEGROUPACTION = "`rulegroupaction`";
	public static final String TABLE_RULESUBGROUP = "`rulesubgroup`";
	public static final String TABLE_TYPES = "`types`";
	public static final String TABLE_USER = "`user`";
	public static final String TABLE_GROUPUSER= "`groupuser`";
	public static final String TABLE_RULEGROUP_TESTDATA = "`rulegroup_testdata`";
	
	public static final String CREATE_TABLE_ACTION_SQL = "CREATE TABLE IF NOT EXISTS " + TABLE_ACTION + " ("
    		+ " `id` int(10) NOT NULL AUTO_INCREMENT,"
    		+ " `description` varchar(255) DEFAULT NULL,"
    		+ " `classname` varchar(255) NOT NULL,"
    		+ " `methodname` varchar(255) DEFAULT NULL,"
    		+ " `methoddisplayname` varchar(255) DEFAULT NULL,"
    		+ " `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,"
    		+ " PRIMARY KEY (`id`)"
    		+ ") ENGINE=MyISAM DEFAULT CHARSET=utf8";
	
	public static final String CREATE_TABLE_ACTION_METHOD_SQL = "CREATE TABLE IF NOT EXISTS " + TABLE_ACTION_METHOD + " ("
    		+ " `id` int(10) NOT NULL AUTO_INCREMENT,"
    		+ " `action_id` int(10) NOT NULL,"
    		+ " `return_type` varchar(80) CHARACTER SET latin1 DEFAULT NULL,"
    		+ " `method_types` varchar(80) CHARACTER SET latin1 DEFAULT NULL,"
    		+ " `note` varchar(255) CHARACTER SET latin1 DEFAULT NULL,"
    		+ " `optional_type1` varchar(80) CHARACTER SET latin1 DEFAULT NULL,"
    		+ " `optional_type1_explanation` varchar(255) DEFAULT NULL,"
    		+ " `optional_type2` varchar(80) CHARACTER SET latin1 DEFAULT NULL,"
    		+ " `optional_type2_explanation` varchar(255) DEFAULT NULL,"
    		+ " `optional_type3` varchar(80) CHARACTER SET latin1 DEFAULT NULL,"
    		+ " `optional_type3_explanation` varchar(255) DEFAULT NULL,"
    		+ " `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,"
    		+ " PRIMARY KEY (`id`),"
    		+ " KEY `idx_actionid` (`action_id`)"
    		+ ") ENGINE=MyISAM DEFAULT CHARSET=utf8";

    public static final String CREATE_TABLE_ACTIVITY_LOG_SQL = "CREATE TABLE IF NOT EXISTS " + TABLE_ACTIVITY_LOG + " ("
    		+ " `id` int(19) NOT NULL AUTO_INCREMENT,"
    		+ " `activity_date` datetime DEFAULT NULL,"
    		+ " `user_id` int(10) unsigned NOT NULL DEFAULT '0',"
    		+ " `message` varchar(255) DEFAULT NULL,"
    		+ " `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,"
    		+ " PRIMARY KEY (`id`),"
    		+ " KEY `idx_last_update` (`last_update`)"
    		+ ") ENGINE=MyISAM CHARSET=utf8";
    
    public static final String CREATE_TABLE_CHECK_SQL = "CREATE TABLE IF NOT EXISTS " + TABLE_CHECK + " ("
    		+ " `id` int(10) NOT NULL AUTO_INCREMENT,"
    		+ " `name` varchar(80) NOT NULL,"
    		+ " `description` varchar(255) DEFAULT NULL,"
    		+ " `name_descriptive` varchar(255) DEFAULT NULL,"
    		+ " `package` varchar(80) DEFAULT NULL,"
    		+ " `class` varchar(80) DEFAULT NULL,"
    		+ " `check_single_field` tinyint(1) DEFAULT NULL,"
    		+ " `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,"
    		+ " PRIMARY KEY (`id`)"
    		+ ") ENGINE=MyISAM DEFAULT CHARSET=utf8";
	
    public static final String CREATE_TABLE_CHECK_METHOD_SQL = "CREATE TABLE IF NOT EXISTS " + TABLE_CHECK_METHOD + " ("
    		+ " `id` int(10) NOT NULL AUTO_INCREMENT,"
    		+ " `check_id` int(10) NOT NULL,"
    		+ " `compare` varchar(80) CHARACTER SET latin1 DEFAULT NULL,"
    		+ " `compare_to` varchar(80) CHARACTER SET latin1 DEFAULT NULL,"
    		+ " `note` varchar(255) CHARACTER SET latin1 DEFAULT NULL,"
    		+ " `parameter1` varchar(80) CHARACTER SET latin1 DEFAULT NULL,"
    		+ " `parameter1_explanation` varchar(255) DEFAULT NULL,"
    		+ " `parameter2` varchar(80) CHARACTER SET latin1 DEFAULT NULL,"
    		+ " `parameter2_explanation` varchar(255) DEFAULT NULL,"
    		+ " `parameter3` varchar(80) CHARACTER SET latin1 DEFAULT NULL,"
    		+ " `parameter3_explanation` varchar(255) DEFAULT NULL,"
    		+ " `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,"
    		+ " PRIMARY KEY (`id`),"
    		+ " KEY `idx_checkid` (`check_id`)"
    		+ ") ENGINE=MyISAM DEFAULT CHARSET=utf8";
    
    public static final String CREATE_TABLE_REFERENCE_FIELDS_SQL = "CREATE TABLE IF NOT EXISTS " + TABLE_REFERENCE_FIELDS + " ("
    		+ " `id` int(11) NOT NULL AUTO_INCREMENT,"
    		+ " `project_id` int(11) NOT NULL,"
    		+ " `name` varchar(80) DEFAULT NULL,"
    		+ " `name_descriptive` varchar(80) NOT NULL,"
    		+ " `description` varchar(120) DEFAULT NULL,"
    		+ " `java_type_id` int(1) NOT NULL,"
    		+ " `last_update_user_id` int(10) DEFAULT NULL,"
    		+ " `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,"
    		+ " PRIMARY KEY (`id`),"
    		+ " UNIQUE KEY `idx_name` (`project_id`,`name`),"
    		+ " KEY `idx_project_id` (`project_id`)"
    		+ ") ENGINE=MyISAM DEFAULT CHARSET=utf8";
    
    public static final String CREATE_TABLE_GROUPS_SQL = "CREATE TABLE IF NOT EXISTS " + TABLE_GROUPS + " ("
    		+ " `id` int(10) unsigned NOT NULL AUTO_INCREMENT,"
    		+ " `name` varchar(45) NOT NULL DEFAULT '',"
    		+ " `description` varchar(255) NOT NULL DEFAULT '',"
    		+ " `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,"
    		+ " PRIMARY KEY (`id`),"
    		+ " KEY `idx_name` (`name`)"
    		+ ") ENGINE=MyISAM DEFAULT CHARSET=utf8";
    
    public static final String CREATE_TABLE_HISTORY_SQL = "CREATE TABLE IF NOT EXISTS " + TABLE_HISTORY + " ("
    		+ " `id` int(10) unsigned NOT NULL AUTO_INCREMENT,"
    		+ " `type` varchar(20) NOT NULL,"
    		+ " `type_id` int(10) unsigned NOT NULL,"
    		+ " `user_id` int(10) DEFAULT NULL,"
    		+ " `parent_1` int(10) DEFAULT NULL,"
    		+ " `parent_2` int(10) DEFAULT NULL,"
    		+ " `parent_3` int(10) DEFAULT NULL,"
    		+ " `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,"
    		+ " PRIMARY KEY (`id`),"
    		+ " KEY `idx_user_id` (`user_id`),"
    		+ " KEY `idx_type_typeid_userid` (`type`,`type_id`,`user_id`)"
    		+ ") ENGINE=MyISAM DEFAULT CHARSET=utf8";
    
    public static final String CREATE_TABLE_PROJECT_SQL = "CREATE TABLE IF NOT EXISTS " + TABLE_PROJECT + " ("
    		+ " `id` int(10) unsigned NOT NULL AUTO_INCREMENT,"
    		+ " `name` varchar(80) NOT NULL,"
    		+ " `description` varchar(255) DEFAULT NULL,"
    		+ " `export_filename` varchar(255) DEFAULT NULL,"
    		+ " `is_private` tinyint(1) DEFAULT '0',"
    		+ " `object_classname` varchar(80) DEFAULT NULL,"
    		+ " `object_method_getter` varchar(80) DEFAULT NULL,"
    		+ " `object_method_setter` varchar(80) DEFAULT NULL,"
    		+ " `database_hostname` varchar(80) DEFAULT NULL,"
    		+ " `database_name` varchar(80) DEFAULT NULL,"
    		+ " `database_tablename` varchar(80) DEFAULT NULL,"
    		+ " `database_userid` varchar(80) DEFAULT NULL,"
    		+ " `database_user_password` varchar(80) DEFAULT NULL,"
    		+ " `last_update_user_id` int(10) DEFAULT NULL,"
    		+ " `owner_user_id` int(10) DEFAULT NULL,"
    		+ " `group_id` int(10) DEFAULT NULL,"
    		+ " `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,"
    		+ " PRIMARY KEY (`id`)"
    		+ ") ENGINE=MyISAM DEFAULT CHARSET=utf8";
    
    public static final String CREATE_TABLE_RULE_SQL = "CREATE TABLE IF NOT EXISTS " + TABLE_RULE + " ("
    		+ " `id` int(10) NOT NULL AUTO_INCREMENT,"
    		+ " `rulesubgroup_id` int(10) NOT NULL DEFAULT '0',"
    		+ " `check_id` int(10) DEFAULT NULL,"
    		+ " `last_update_user_id` int(10) DEFAULT NULL,"
    		+ " `name` varchar(80) NOT NULL,"
    		+ " `description` varchar(255) DEFAULT NULL,"
    		+ " `object1_parametertype_id` int(10) DEFAULT NULL,"
    		+ " `object1_parameter` varchar(255) DEFAULT NULL,"
    		+ " `object1_type_id` int(10) DEFAULT NULL,"
    		+ " `object2_parametertype_id` int(10) DEFAULT NULL,"
    		+ " `object2_parameter` varchar(255) DEFAULT NULL,"
    		+ " `object2_type_id` int(10) DEFAULT NULL,"
    		+ " `expectedvalue` mediumtext DEFAULT NULL,"
    		+ " `expectedvalue_type_id` int(10) DEFAULT NULL,"
    		+ " `additional_parameter` varchar(255) DEFAULT NULL,"
    		+ " `additional_parameter_type_id` int(10) DEFAULT NULL,"
    		+ " `message_passed` varchar(255) NOT NULL,"
    		+ " `message_failed` varchar(255) NOT NULL,"
    		+ " `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,"
    		+ " PRIMARY KEY (`id`),"
    		+ " KEY `idx_rulesubgroup_id` (`rulesubgroup_id`)"
    		+ ") ENGINE=MyISAM DEFAULT CHARSET=utf8";
    
    public static final String CREATE_TABLE_RULEGROUP_SQL = "CREATE TABLE IF NOT EXISTS " + TABLE_RULEGROUP + " ("
    		+ " `id` int(10) unsigned NOT NULL AUTO_INCREMENT,"
    		+ " `project_id` int(10) unsigned NOT NULL DEFAULT '0',"
    		+ " `last_update_user_id` int(10) DEFAULT NULL,"
    		+ " `name` varchar(80) NOT NULL,"
    		+ " `description` varchar(255) NOT NULL,"
    		+ " `valid_from` date NOT NULL,"
    		+ " `valid_until` date NOT NULL,"
    		+ " `dependent_rulegroup_id` int(10) unsigned DEFAULT NULL,"
    		+ " `dependent_rulegroup_execute_if` varchar(6) DEFAULT NULL,"
    		+ " `disabled` tinyint(2) default 0," 
    		+ " `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,"
    		+ " PRIMARY KEY (`id`),"
    		+ " KEY `idx_project_id` (`project_id`)"
    		+ ") ENGINE=MyISAM DEFAULT CHARSET=utf8";
    
    public static final String CREATE_TABLE_RULEGROUPACTION_SQL = "CREATE TABLE IF NOT EXISTS " + TABLE_RULEGROUPACTION + " ("
    		+ " `id` int(10) NOT NULL AUTO_INCREMENT,"
    		+ " `rulegroup_id` int(10) NOT NULL DEFAULT '0',"
    		+ " `last_update_user_id` int(10) DEFAULT NULL,"
    		+ " `action_id` int(10) NOT NULL,"
    		+ " `name` varchar(80) NOT NULL,"
    		+ " `description` varchar(255) DEFAULT NULL,"
    		+ " `object1_parametertype_id` int(10) DEFAULT NULL,"
    		+ " `object1_parameter` varchar(255) DEFAULT NULL,"
    		+ " `object1_type_id` int(10) DEFAULT NULL,"
    		+ " `object2_parametertype_id` int(10) DEFAULT NULL,"
    		+ " `object2_parameter` varchar(255) DEFAULT NULL,"
    		+ " `object2_type_id` int(10) DEFAULT NULL,"
    		+ " `object3_parametertype_id` int(10) DEFAULT NULL,"
    		+ " `object3_parameter` varchar(255) DEFAULT NULL,"
    		+ " `object3_type_id` int(10) DEFAULT NULL,"
    		+ " `parameter1` varchar(255) DEFAULT NULL,"
    		+ " `parameter1_type_id` int(10) DEFAULT NULL,"
    		+ " `parameter2` varchar(255) DEFAULT NULL,"
    		+ " `parameter2_type_id` int(10) DEFAULT NULL,"
    		+ " `parameter3` varchar(255) DEFAULT NULL,"
    		+ " `parameter3_type_id` int(10) DEFAULT NULL,"
    		+ " `execute_if` varchar(20) DEFAULT NULL,"
    		+ " `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,"
    		+ " PRIMARY KEY (`id`),"
    		+ " KEY `idx_rulegroup_id` (`rulegroup_id`)"
    		+ ") ENGINE=MyISAM DEFAULT CHARSET=utf8";

    public static final String CREATE_TABLE_RULESUBGROUP_SQL = "CREATE TABLE IF NOT EXISTS " + TABLE_RULESUBGROUP + " ("
    		+ " `id` int(10) unsigned NOT NULL AUTO_INCREMENT,"
    		+ " `rulegroup_id` int(10) unsigned NOT NULL DEFAULT '0',"
    		+ " `last_update_user_id` int(10) DEFAULT NULL,"
    		+ " `name` varchar(80) NOT NULL,"
    		+ " `description` varchar(255) DEFAULT NULL,"
    		+ " `intergroupoperator` enum('and','or') NOT NULL,"
    		+ " `ruleoperator` enum('and','or') NOT NULL,"
    		+ " `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,"
    		+ " PRIMARY KEY (`id`),"
    		+ " KEY `idx_rulegroup_id` (`rulegroup_id`)"
    		+ ") ENGINE=MyISAM DEFAULT CHARSET=utf8";
	
    public static final String CREATE_TABLE_TYPES_SQL = "CREATE TABLE IF NOT EXISTS " + TABLE_TYPES + " ("
			+ " `id` int(19) NOT NULL AUTO_INCREMENT,"
			+ " `name` varchar(20) DEFAULT NULL,"
			+ " `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,"
			+ " PRIMARY KEY (`id`)"
			+ ") ENGINE=MyISAM DEFAULT CHARSET=utf8";
    
    public static final String CREATE_TABLE_USER_SQL = "CREATE TABLE IF NOT EXISTS " + TABLE_USER + " ("
    		+ " `id` int(10) unsigned NOT NULL AUTO_INCREMENT,"
    		+ " `userid` varchar(25) NOT NULL,"
    		+ " `name` varchar(80) NOT NULL DEFAULT '',"
    		+ " `password` varchar(255) DEFAULT NULL,"
    		+ " `email` varchar(80) DEFAULT NULL,"
    		+ " `generated_code` VARCHAR(40) NULL DEFAULT NULL,"
    		+ " `lastlogin` datetime DEFAULT NULL,"
    		+ " `deactivated` tinyint(1) unsigned DEFAULT '0',"
    		+ " `deactivated_date` date DEFAULT '0000-00-00',"
    		+ " `password_update_date` date DEFAULT '0000-00-00',"
    		+ " `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,"
    		+ " PRIMARY KEY (`id`),"
    		+ " UNIQUE KEY `idx_userid` (`userid`),"
    		+ " KEY `idx_deactivated` (`deactivated`)"
    		+ ") ENGINE=MyISAM DEFAULT CHARSET=utf8";

    public static final String CREATE_TABLE_GROUPUSER_SQL = "CREATE TABLE IF NOT EXISTS " + TABLE_GROUPUSER + " ("
    		+ " `id` int(10) unsigned NOT NULL AUTO_INCREMENT,"
    		+ " `user_id` int(10) unsigned NOT NULL DEFAULT '0',"
    		+ " `groups_id` int(10) unsigned NOT NULL DEFAULT '0',"
    		+ " `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,"
    		+ " PRIMARY KEY (`id`),"
    		+ " UNIQUE KEY `idx_groupuser` (`user_id`,`groups_id`),"
    		+ " KEY `idx_user` (`user_id`),"
    		+ " KEY `idx_group` (`groups_id`)"
    		+ ") ENGINE=MyISAM DEFAULT CHARSET=utf8";
    
    public static final String CREATE_TABLE_RULEGROUP_TESTDATA = "CREATE TABLE IF NOT EXISTS " + TABLE_RULEGROUP_TESTDATA + " ("
    		  +" `id` int(10) unsigned NOT NULL AUTO_INCREMENT,"
    		  +" `rulegroup_id` int(10) unsigned NOT NULL,"
    		  +" `user_id` int(10) unsigned NOT NULL,"
    		  +" `value` mediumtext DEFAULT NULL,"
    		  +" `last_update` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),"
    		  +" PRIMARY KEY (`id`),"
    		  +" KEY `idx_rulegroup_user_id` (`rulegroup_id`,`user_id`)"
    		  +") ENGINE=MyISAM DEFAULT CHARSET=utf8";
    
    public static final String CREATE_GROUPS = "INSERT INTO " + TABLE_GROUPS + " VALUES (1,'Admin','Admin Group',now())";
    
    public static final String CREATE_USERS = "INSERT INTO " + TABLE_USER + " VALUES "
    		+ "(1,'admin','admin user','*4ACFE3202A5FF5CF467898FC58AAB1D615029441',NULL,NULL,'2000-01-01 00:00:00',0,NULL,'2000-01-01',now())";
    
    public static final String CREATE_GROUPUSERS = "INSERT INTO " + TABLE_GROUPUSER + " VALUES (1,1,1,now())";
    
    public static final String CREATE_TYPES =  "INSERT INTO " + TABLE_TYPES + " VALUES (1,'string',now()),"
    			+ "(2,'integer',now()),"
    			+ "(3,'float',now()),"
    			+ "(4,'double',now()),"
    			+ "(5,'boolean',now()),"
    			+ "(6,'long',now()),"
    			+ "(7,'bigdecimal',now()),"
    			+ "(8,'date',now())";
    
    public static final String CREATE_CHECK_METHODS = "INSERT INTO " + TABLE_CHECK_METHOD + " VALUES (1,1,'String','String','Without parameter Strings are compared case sensitive','boolean','Ignore case differences during comparison.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(2,1,'boolean','boolean',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(3,1,'Date','Date',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(6,1,'Date','String','Without parameter the String is converted to a Date using the format yyyy-MM-dd','String','Provide a date format different from the default.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(7,1,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(8,1,'float','float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(9,1,'integer','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(10,1,'long','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(11,1,'long','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(12,1,'integer','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(13,3,'String','String','The default is to compare the values case sensitive.','boolean','Ignore case differences during comparison.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(14,4,'String','String','The default is to compare the values case sensitive.','boolean','Ignore case differences during comparison.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(15,7,'String','String','The default is to compare the values case sensitive.','boolean','Ignore case differences during comparison.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(16,8,'String','String','The default is to compare the values case sensitive.','boolean','Ignore case differences during comparison.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(17,9,'String','String','The default is to compare the values case sensitive.','boolean','Ignore case differences during comparison.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(18,10,'String','String','The default is to compare the values case sensitive.','boolean','Ignore case differences during comparison.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(19,24,'String','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(20,24,'String','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(21,24,'integer','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(22,24,'integer','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(23,24,'long','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(25,30,'String','String','First String is a comma seperated list of values','boolean','Ignore case differences during comparison.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(26,31,'String','String','First String is a comma seperated list of values','boolean','Ignore case differences during comparison.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(28,31,'String','long','First String is a comma seperated list of long values',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(29,30,'String','integer','First String is a comma seperated list of integer values',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(30,31,'String','integer','First String is a comma seperated list of integer values',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(31,30,'String','long','First String is a comma seperated list of long values',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(32,17,'double','double','The compare to value is the lower limit','double','This value defines the upper limit',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(33,17,'double','String','String is comma seperated list of lower limit, upper limit',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(34,17,'float','float','The compare to value is the lower limit','float','This value defines the upper limit',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(35,17,'float','String','String is comma seperated list of lower limit, upper limit',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(36,17,'integer','integer','The compare to value is the lower limit','integer','This value defines the upper limit',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(37,17,'long','long','The compare to value is the lower limit','long','This value defines the upper limit',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(38,17,'integer','String','String is comma seperated list of lower limit, upper limit',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(39,17,'long','String','String is comma seperated list of lower limit, upper limit',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(40,20,'String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(41,2,'String','String','Without parameter Strings are compared case sensitive','boolean','Ignore case differences during comparison.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(42,2,'boolean','boolean',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(43,2,'Date','Date',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(44,2,'Date','String','Without parameter the String is converted to a Date using the format yyyy-MM-dd','String','Provide a date format different from the default.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(45,2,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(46,2,'float','float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(47,2,'integer','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(48,2,'long','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(49,2,'long','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(50,2,'integer','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(51,21,'String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(52,11,'Date','Date',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(53,11,'Date','String','Without parameter the String is converted to a Date using the format yyyy-MM-dd','String','Provide a date format different from the default.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(54,11,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(55,11,'double','Integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(56,11,'double','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(57,11,'float','float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(58,11,'float','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(59,11,'integer','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(60,11,'long','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(61,11,'long','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(62,11,'String','integer','Checks if the length of the String is greater than the integer value',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(63,11,'String','long','Checks if the length of the String is greater than the long value',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(64,11,'String','String','Compare to String values that contain dates','String','Provide the date format of the String values',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(65,5,'String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(66,6,'String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(67,11,'double','float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(68,11,'float','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(69,11,'float','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(70,12,'Date','Date',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(71,12,'Date','String','Without parameter the String is converted to a Date using the format yyyy-MM-dd','String','Provide a date format different from the default.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(72,12,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(73,12,'double','Integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(74,12,'double','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(75,12,'float','float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(76,12,'float','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(77,12,'integer','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(78,12,'long','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(79,12,'long','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(80,12,'String','integer','Checks if the length of the String is smaller than the integer value',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(81,12,'String','long','Checks if the length of the String is smaller than the long value',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(82,12,'String','String','Compare to String values that contain dates','String','Provide the date format of the String values',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(83,12,'double','float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(84,12,'float','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(85,12,'float','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(86,13,'Date','Date',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(87,13,'Date','String','Without parameter the String is converted to a Date using the format yyyy-MM-dd','String','Provide a date format different from the default.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(88,13,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(89,13,'double','Integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(90,13,'double','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(91,13,'float','float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(92,13,'float','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(93,13,'integer','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(94,13,'long','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(95,13,'long','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(96,13,'String','integer','Checks if the length of the String is greater than or equal to the integer value',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(97,13,'String','long','Checks if the length of the String is greater than or equal to the long value',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(98,13,'String','String','Compare to String values that contain dates','String','Provide the date format of the String values',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(99,13,'double','float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(100,13,'float','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(101,13,'float','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(102,14,'Date','Date',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(103,14,'Date','String','Without parameter the String is converted to a Date using the format yyyy-MM-dd','String','Provide a date format different from the default.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(104,14,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(105,14,'double','Integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(106,14,'double','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(107,14,'float','float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(108,14,'float','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(109,14,'integer','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(110,14,'long','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(111,14,'long','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(112,14,'String','integer','Checks if the length of the String is smaller than or equal to the integer value',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(113,14,'String','long','Checks if the length of the String is smaller than or equal to the long value',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(114,14,'String','String','Compare to String values that contain dates','String','Provide the date format of the String values',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(115,14,'double','float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(116,14,'float','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(117,14,'float','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(118,15,'integer','String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(119,15,'long','String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(120,15,'String','String','Without parameter Strings are compared case sensitive','boolean','Define if the comparison ignores case differences',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(121,16,'integer','String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(122,16,'long','String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(123,16,'String','String','Without parameter Strings are compared case sensitive','boolean','Define if the comparison ignores case differences',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(124,18,'double','double','The compare to value is the lower limit','double','This value defines the upper limit',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(125,18,'double','String','String is comma seperated list of lower limit, upper limit',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(126,18,'float','float','The compare to value is the lower limit','float','This value defines the upper limit',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(127,18,'float','String','String is comma seperated list of lower limit, upper limit',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(128,18,'integer','integer','The compare to value is the lower limit','integer','This value defines the upper limit',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(129,18,'long','long','The compare to value is the lower limit','long','This value defines the upper limit',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(130,18,'integer','String','String is comma seperated list of lower limit, upper limit',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(131,18,'long','String','String is comma seperated list of lower limit, upper limit',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(132,19,'String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(133,29,'double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(134,29,'float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(135,29,'long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(136,29,'integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(138,22,'Date',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(139,22,'double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(140,22,'float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(142,22,'integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(143,22,'long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(144,22,'String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(145,23,'Date',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(146,23,'double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(147,23,'float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(148,23,'integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(149,23,'long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(150,23,'String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(151,25,'String','String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(152,26,'String','String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(153,27,'String','String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(154,28,'String','String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(155,32,'integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(156,33,'integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(157,34,'integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(158,34,'long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(159,35,'integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(160,35,'long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(161,36,'String','String',NULL,'integer','The value for the distance between the two strings to be evaluated',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(162,37,'String','String',NULL,'integer','The value for the distance between the two strings to be evaluated',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(163,38,'String','String',NULL,'integer','The value for the distance between the two strings to be evaluated',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(164,39,'String','String',NULL,'integer','The value for the distance between the two strings to be evaluated',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(165,40,'String','String',NULL,'integer','The value for the distance between the two strings to be evaluated',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(166,1,'Date','Date','Without parameter the String is converted to a Date using the format yyyy-MM-dd','String','Provide a date format different from the default.',NULL,NULL,NULL,NULL,now()),"
    		+ "    		(167,1,'boolean','String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "    		(168,1,'String','boolean',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now())";
    
    public static final String CREATE_CHECKS = "INSERT INTO " + TABLE_CHECK + " VALUES (1,'Check Is Equal','Check for equality of values','is equal to','com.datamelt.rules.implementation','CheckIsEqual',0,'2014-11-27 22:03:01'),"
    		+ "(2,'Check Is Not Equal','Check if values are not equal','is not equal to','com.datamelt.rules.implementation','CheckIsNotEqual',0,'2014-11-27 20:35:35'),"
    		+ "(3,'Check Contains','Check if one String contains another String','contains','com.datamelt.rules.implementation','CheckContains',0,'2014-11-27 20:35:35'),"
    		+ "(4,'Check Not Contains','Check if one String does not contain another String','does not contain','com.datamelt.rules.implementation','CheckNotContains',0,'2014-11-27 20:35:35'),"
    		+ "(5,'Check Is Uppercase','Check if a String contains upper case characters only','is uppercase','com.datamelt.rules.implementation','CheckIsUppercase',1,'2014-11-27 20:35:35'),"
    		+ "(6,'Check Is Lowercase','Check if a String contains lower case characters only','is lowercase','com.datamelt.rules.implementation','CheckIsLowercase',1,'2014-11-27 20:35:35'),"
    		+ "(7,'Check Ends With','Check if a String ends with a certain String','ends with','com.datamelt.rules.implementation','CheckEndsWith',0,'2014-11-27 20:35:35'),"
    		+ "(8,'Check Not Ends With','Check if a String does not end with a certain String','does not end with','com.datamelt.rules.implementation','CheckNotEndsWith',0,'2014-11-27 20:35:35'),"
    		+ "(9,'Check Starts With','Check if a String starts with a certain String','starts with','com.datamelt.rules.implementation','CheckStartsWith',0,'2014-11-27 20:35:35'),"
    		+ "(10,'Check Not Starts With','Check if a String does not start with a certain String','does not start with','com.datamelt.rules.implementation','CheckNotStartsWith',0,'2014-11-27 20:35:35'),"
    		+ "(11,'Check Is Greater','Check if a numeric value is greater than the other one. In case of a String checks if the length of a String is greater than the other one','is greater than','com.datamelt.rules.implementation','CheckIsGreater',0,'2014-11-27 20:35:35'),"
    		+ "(12,'Check Is Smaller','Check if a numeric value is smaller than the other one. In case of a String checks if the length of a String is smaller than the other one','is smaller than','com.datamelt.rules.implementation','CheckIsSmaller',0,'2014-11-27 20:35:35'),"
    		+ "(13,'Check Is Greater Or Equal','Check if a numeric value is greater or equal than the other one. In case of a string checks if the length of a String is greater or equal than the other one','is greater or equal than','com.datamelt.rules.implementation','CheckIsGreaterOrEqual',0,'2014-11-27 20:35:35'),"
    		+ "(14,'Check Is Smaller Or Equal','Check if a numeric value is smaller or equal than the other one. In case of a string checks if the length of a String is smaller or equal than the other one','is smaller or equal than','com.datamelt.rules.implementation','CheckIsSmallerOrEqual',0,'2014-11-27 20:35:35'),"
    		+ "(15,'Check Is In List','Checks if a string is contained in a list of values. The list is represented by a string where the individual values are seperated by a comma','is in list','com.datamelt.rules.implementation','CheckIsInList',0,'2014-11-27 20:35:35'),"
    		+ "(16,'Check Is Not In List','Checks if a string is not contained in a list of values. The list is represented by a string where the individual values are seperated by a comma','is not in list','com.datamelt.rules.implementation','CheckIsNotInList',0,'2014-11-27 20:35:35'),"
    		+ "(17,'Check Is Between','Checks if a numeric value is between two given values','is between','com.datamelt.rules.implementation','CheckIsBetween',0,'2014-11-27 20:35:35'),"
    		+ "(18,'Check Is Not Between','Checks if a numeric value is not between two given values','is not between','com.datamelt.rules.implementation','CheckIsNotBetween',0,'2014-11-27 20:35:35'),"
    		+ "(19,'Check Is Numeric','Checks if a value is numeric where all characters are numbers','is numeric','com.datamelt.rules.implementation','CheckIsNumeric',1,'2014-11-27 20:35:35'),"
    		+ "(20,'Check Is Empty','Checks if a string value is empty, meaning of zero length','is empty','com.datamelt.rules.implementation','CheckIsEmpty',1,'2014-11-27 20:35:35'),"
    		+ "(21,'Check Is Not Empty','Checks if a string value is not empty, meaning its length is greater than zero','is not empty','com.datamelt.rules.implementation','CheckIsNotEmpty',1,'2014-11-27 20:35:35'),"
    		+ "(22,'Check Is Null','Checks if a value is null','is null','com.datamelt.rules.implementation','CheckIsNull',1,'2014-11-27 20:35:35'),"
    		+ "(23,'Check Is Not Null','Checks if a value is not null','is not null','com.datamelt.rules.implementation','CheckIsNotNull',1,'2014-11-27 20:35:35'),"
    		+ "(24,'Check Length','Checks if a string has a defined length. In case of an integer, checks the number of digits the integer consists of','has length','com.datamelt.rules.implementation','CheckLength',0,'2014-11-27 20:35:35'),"
    		+ "(25,'Check Matches','Checks if a string matches another one, using a regular expression pattern','matches','com.datamelt.rules.implementation','CheckMatches',0,'2014-11-27 20:35:35'),"
    		+ "(26,'Check Not Matches','Checks if a string does not match another one, using a regular expression pattern','not matches','com.datamelt.rules.implementation','CheckNotMatches',0,'2014-11-27 20:35:35'),"
    		+ "(27,'Check Sounds Like','Checks if a string sounds like the other, using the soundex algorithm','sounds like','com.datamelt.rules.implementation','CheckSoundsLike',0,'2014-11-27 20:35:35'),"
    		+ "(28,'Check Not Sounds Like','Checks if a string does not sound like the other, using the soundex algorithm','not sounds like','com.datamelt.rules.implementation','CheckNotSoundsLike',0,'2014-11-27 22:04:10'),"
    		+ "(29,'Check Is Negative Number','Checks if a number is smaller than zero','is negativ number','com.datamelt.rules.implementation','CheckIsNegativeNumber',1,'2014-11-27 20:35:35'),"
    		+ "(30,'Check List Has Member','Checks if a comma seperated list of values contains a given member','has list member','com.datamelt.rules.implementation','CheckListHasMember',0,now()),"
    		+ "(31,'Check List Not Has Member','Checks if a comma seperated list of values not contains a given member','has not list member','com.datamelt.rules.implementation','CheckListNotHasMember',0,now()),"
    		+ "(32,'Check Is Prime','Checks if a number is a prime number','is prime','com.datamelt.rules.implementation','CheckIsPrime',1,'2014-11-27 20:35:35'),"
    		+ "(33,'Check Is Not Prime','Checks if a number is not a prime number','is not prime','com.datamelt.rules.implementation','CheckIsNotPrime',1,'2014-11-27 20:35:35'),"
    		+ "(34,'Check Is Even','Checks if a number is an even number','is even','com.datamelt.rules.implementation','CheckIsEven',1,'2014-11-27 20:35:35'),"
    		+ "(35,'Check Is Not Even','Checks if a number is not an even number','is not even','com.datamelt.rules.implementation','CheckIsNotEven',1,'2014-11-27 20:35:35'),"
    		+ "(36,'Check Distance Is Equal','Checks if the Levenshtein distance between two strings is equal to a given value','is equal to (Levenshtein distance)','com.datamelt.rules.implementation','CheckDistanceIsEqual',0,now()),"
    		+ "(37,'Check Distance Is Greater Or Equal','Checks if the Levenshtein distance between two strings is greater or equal to a given value','is greater than or equal to (Levenshtein distance)','com.datamelt.rules.implementation','CheckDistanceIsGreaterOrEqual',0,now()),"
    		+ "(38,'Check Distance Is Smaller Or Equal','Checks if the Levenshtein distance between two strings is smaller or equal to a given value','is smaller than or equal to (Levenshtein distance)','com.datamelt.rules.implementation','CheckDistanceIsSmallerOrEqual',0,now()),"
    		+ "(39,'Check Distance Is Smaller','Checks if the Levenshtein distance between two strings is smaller than a given value','is smaller than (Levenshtein distance)','com.datamelt.rules.implementation','CheckDistanceIsSmaller',0,now()),"
    		+ "(40,'Check Distance Is Greater','Checks if the Levenshtein distance between two strings is greater than a given value','is greater than (Levenshtein distance)','com.datamelt.rules.implementation','CheckDistanceIsGreater',0,now())";

    public static final String CREATE_ACTION_METHODS = "INSERT INTO " + TABLE_ACTION_METHOD + " VALUES (1,4,'String','String, double',NULL,'String','Separator to be used',NULL,NULL,NULL,NULL,now()),"
    		+ "(2,5,'String','String, integer','integer: maximum length of the String',NULL,'number of spaces to add at the begining',NULL,NULL,NULL,NULL,now()),"
    		+ "(3,3,'String','String, String',NULL,'String','Separator to be used',NULL,NULL,NULL,NULL,now()),"
    		+ "(4,3,'String','String, integer','','String','Separator to be used',NULL,NULL,NULL,NULL,now()),"
    		+ "(5,3,'String','String, long',NULL,'String','Separator to be used',NULL,NULL,NULL,NULL,now()),"
    		+ "(6,4,'String','String, float',NULL,'String','Separator to be used',NULL,NULL,NULL,NULL,now()),"
    		+ "(7,4,'String','String, integer',NULL,'String','Separator to be used',NULL,NULL,NULL,NULL,now()),"
    		+ "(8,4,'String','String, long',NULL,'String','Separator to be used',NULL,NULL,NULL,NULL,now()),"
    		+ "(9,4,'String','String, String',NULL,'String','Separator to be used',NULL,NULL,NULL,NULL,now()),"
    		+ "(10,7,'String','String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(11,1,'String','String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(12,11,'boolen','boolean',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(13,11,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(14,11,'float','float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(15,11,'integer','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(16,11,'long','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(17,16,'Date','Date',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(18,16,'Date','String',NULL,'String','Date format of the String',NULL,NULL,NULL,NULL,now()),"
    		+ "(19,22,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(20,31,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(21,31,'float','float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(22,31,'integer','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(23,31,'long','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(24,6,'String','String, integer','integer: maximum length of the String',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(25,29,'double','double, double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(26,29,'double','double, float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(27,29,'double','double, integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(28,29,'double','integer, double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(29,29,'double','integer, float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(30,29,'double','integer, integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(31,29,'double','long, double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(32,29,'double','long, float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(33,29,'double','long, int',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(34,25,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(35,28,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(36,20,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(37,21,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(38,13,'double','double, double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(39,13,'double','double, integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(40,13,'float','float, float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(41,13,'double','integer, integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(42,13,'double','integer, long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(43,13,'double','long, double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(44,13,'double','long, integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(45,13,'double','long, long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(46,14,'double','double, double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(47,14,'double','double, integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(48,14,'float','float, float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(49,14,'long','integer, integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(50,14,'long','integer, long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(51,14,'double','long, double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(52,14,'long','long, integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(53,14,'long','long, long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(54,2,'String','String, String',NULL,'String','Separator to be used',NULL,NULL,NULL,NULL,now()),"
    		+ "(55,2,'String','String, integer','','String','Separator to be used',NULL,NULL,NULL,NULL,now()),"
    		+ "(56,2,'String','String, long',NULL,'String','Separator to be used',NULL,NULL,NULL,NULL,now()),"
    		+ "(57,19,'long','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(58,19,'int','float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(59,23,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(60,24,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(61,18,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(62,18,'double','float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(63,18,'long','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(64,18,'long','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(65,17,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(66,17,'double','float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(67,17,'double','integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(68,17,'double','long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(69,9,'String','String, integer','integer: start of the substring','integer','end of the substring',NULL,NULL,NULL,NULL,now()),"
    		+ "(70,15,'long','Date, Date','',NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(71,15,'double','double, double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(72,15,'float','float, float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(73,15,'long','long, long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(74,15,'integer','integer, integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(75,15,'long','integer, long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(76,15,'long','long, integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(77,30,'double','double, double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(78,30,'double','double, float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(79,30,'double','double, integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(80,30,'double','integer, double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(81,30,'double','integer, float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(82,30,'double','integer, integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(83,30,'double','long, double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(84,30,'double','long, float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(85,30,'double','long, int',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(86,12,'double','double, double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(87,12,'float','float, float',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(88,12,'integer','integer, integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(89,12,'long','integer, long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(90,12,'long','long, integer',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(91,12,'long','long, long',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(92,26,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(93,27,'double','double',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(94,10,'String','String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(95,8,'String','String',NULL,NULL,NULL,NULL,NULL,NULL,NULL,now()),"
    		+ "(96,32,'String','String',NULL,'integer','Number of offset days',NULL,NULL,NULL,NULL,now()),"
    		+ "(100,33,'Date','[empty]',NULL,'Date','Date for which to calculate the last day of the month',NULL,NULL,NULL,NULL,now()),"
    		+ "(99,33,'String','integer, integer',NULL,'String','Date format of the String',NULL,NULL,NULL,NULL,now()),"
    		+ "(102,34,'Date','[empty]','','Date','Date for which to calculate the first day of the month',NULL,NULL,NULL,NULL,now()),"
    		+ "(103,34,'String','integer, integer','','String','Date format of the String',NULL,NULL,NULL,NULL,now()),"
    		+ "(104,35,'Date','[empty]','','Date','Date for which to calculate the mid day of the month',NULL,NULL,NULL,NULL,now()),"
    		+ "(105,35,'String','integer, integer','','String','Date format of the String',NULL,NULL,NULL,NULL,now()),"
    		+ "(106,11,'BigDecimal','BigDecimal',null,null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(107,36,'String','String, String, String',null,null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(108,9,'String','String, String','second String is the String up to which the substring shall extend',null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(110,37,'Date','Date, long',null,null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(111,38,'long','long, long',null,null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(112,38,'long','long, integer',null,null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(113,38,'integer','integer, integer',null,null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(114,39,'integer','integer, integer',null,null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(115,40,'Date','Date, long',null,null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(116,41,'Date','Date, long',null,null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(117,42,'Date','Date, long',null,null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(118,43,'Date','Date, long',null,null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(119,44,'Date','Date, long',null,null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(120,45,'Date','Date, long',null,null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(121,46,'Date','Date, long',null,null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(122,4,'String','double, String',NULL,'String','Separator to be used',NULL,NULL,NULL,NULL,now()),"
    		+ "(123,4,'String','integer, String',NULL,'String','Separator to be used',NULL,NULL,NULL,NULL,now()),"
    		+ "(124,4,'String','float, String',NULL,'String','Separator to be used',NULL,NULL,NULL,NULL,now()),"
    		+ "(125,4,'String','long, String',NULL,'String','Separator to be used',NULL,NULL,NULL,NULL,now()),"
    		+ "(130,47,'String','String, String',NULL,null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(131,48,'String','integer, String',NULL,null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(132,49,'String','String, String, integer','second String is the mask to use. integer is start position',null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(133,49,'String','String, String, integer, integer','second String is the mask to use. integer is start position/end position',null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(134,49,'String','String, String','second String is the mask to use',null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(135,50,'String','String, String','second String is the encryption key to use',null,null,NULL,NULL,NULL,NULL,now()),"
    		+ "(136,51,'String','String, String','second String is the decryption key to use',null,null,NULL,NULL,NULL,NULL,now())";
    
    public static final String CREATE_ACTIONS = "INSERT INTO " + TABLE_ACTION + " VALUES (1,'Set a value to another value','com.datamelt.rules.core.action.StringAction','setValue','set value (string)',now()),"
    		+ "(2,'Add a value to the beginning of a value','com.datamelt.rules.core.action.StringAction','prependValue','prepend',now()),"
    		+ "(3,'Add a value to the end of a value','com.datamelt.rules.core.action.StringAction','appendValue','append',now()),"
    		+ "(4,'Concatenate two values','com.datamelt.rules.core.action.StringAction','concatValues','concat',now()),"
    		+ "(5,'Add leading spaces to a value','com.datamelt.rules.core.action.StringAction','addLeadingSpaces','add leading spaces',now()),"
    		+ "(6,'Add leading zeros to a value','com.datamelt.rules.core.action.StringAction','addLeadingZeros','add leading zeros',now()),"
    		+ "(7,'Set a value to its lowercase representation','com.datamelt.rules.core.action.StringAction','lowerCaseValue','lowercase',now()),"
    		+ "(8,'Set a value to its uppercase representation','com.datamelt.rules.core.action.StringAction','upperCaseValue','uppercase',now()),"
    		+ "(9,'Set a value to the substring of a value','com.datamelt.rules.core.action.StringAction','subStringValue','substring',now()),"
    		+ "(10,'Remove (trim) all spaces from the beginning and the end of a value','com.datamelt.rules.core.action.StringAction','trimValue','trim',now()),"
    		+ "(11,'Set a value to another value','com.datamelt.rules.core.action.MathAction','setValue','set value (number)',now()),"
    		+ "(12,'Sum two values','com.datamelt.rules.core.action.MathAction','addValues','sum',now()),"
    		+ "(13,'Devide two values','com.datamelt.rules.core.action.MathAction','devideValues','devide',now()),"
    		+ "(14,'Multiply two values','com.datamelt.rules.core.action.MathAction','multiplyValues','multiply',now()),"
    		+ "(15,'Subtract two values','com.datamelt.rules.core.action.MathAction','subtractValues','subtract',now()),"
    		+ "(16,'Set a value to another value','com.datamelt.rules.core.action.DateAction','setValue','set value (date)',now()),"
    		+ "(17,'Set a value to the square root of a value','com.datamelt.rules.core.action.MathAction','squareRootValue','square root',now()),"
    		+ "(18,'Set a value to the square of a value','com.datamelt.rules.core.action.MathAction','squareValue','square',now()),"
    		+ "(19,'Round a value','com.datamelt.rules.core.action.MathAction','roundValue','round',now()),"
    		+ "(20,'Set a value to the cosinus of a value','com.datamelt.rules.core.action.MathAction','cosValue','cosinus',now()),"
    		+ "(21,'Set a value to the cosinush of a value','com.datamelt.rules.core.action.MathAction','coshValue','cosinush',now()),"
    		+ "(22,'Set a value to the acosinus of a value','com.datamelt.rules.core.action.MathAction','acosValue','acosinus',now()),"
    		+ "(23,'Set a value to the sinus of a value','com.datamelt.rules.core.action.MathAction','sinValue','sinus',now()),"
    		+ "(24,'Set a value to the sinush of a value','com.datamelt.rules.core.action.MathAction','sinhValue','sinush',now()),"
    		+ "(25,'Set a value to the asinus of a value','com.datamelt.rules.core.action.MathAction','asinValue','asinus',now()),"
    		+ "(26,'Set a value to the tangens of a value','com.datamelt.rules.core.action.MathAction','tanValue','tangens',now()),"
    		+ "(27,'Set a value to the tangensh of a value','com.datamelt.rules.core.action.MathAction','tanhValue','tangensh',now()),"
    		+ "(28,'Set a value to the atangens of a value','com.datamelt.rules.core.action.MathAction','atanValue','atangens',now()),"
    		+ "(29,'Add a percentage of a value to the value','com.datamelt.rules.core.action.MathAction','addPercentageValue','add percentage',now()),"
    		+ "(30,'Subtract a percentage of a value from the value','com.datamelt.rules.core.action.MathAction','subtractPercentageValue','subtract percentage',now()),"
    		+ "(31,'Set a value to its absolute value','com.datamelt.rules.core.action.MathAction','absValue','absolute',now()),"
    		+ "(32,'Set a value to todays date','com.datamelt.rules.core.action.DateAction','setTodayDate','set today date',now()),"
    		+ "(33,'Set a value to the last day of the month','com.datamelt.rules.core.action.DateAction','setLastDayOfMonth','set last day of month',now()),"
    		+ "(34,'Set a value to the first day of the month','com.datamelt.rules.core.action.DateAction','setFirstDayOfMonth','set first day of month',now()),"
    		+ "(35,'Set a value to the mid day of the month (day 15)','com.datamelt.rules.core.action.DateAction','setMidDayOfMonth','set mid day of month',now()),"
    		+ "(36,'Replace a value by providing a regular expression to search for and a replacement value','com.datamelt.rules.core.action.StringAction','replaceValue','replace value',now()),"
    		+ "(37,'Add minutes to a date','com.datamelt.rules.core.action.DateAction','addMinutes','add minutes',now()),"
    		+ "(38,'Remainder value (modulus)','com.datamelt.rules.core.action.MathAction','remainderValue','remainder value',now()),"
    		+ "(39,'Random value','com.datamelt.rules.core.action.MathAction','randomValue','random value',now()),"
    		+ "(40,'Add hours to a date','com.datamelt.rules.core.action.DateAction','addHours','add hours',now()),"
    		+ "(41,'Add seconds to a date','com.datamelt.rules.core.action.DateAction','addSeconds','add seconds',now()),"
    		+ "(42,'Add days to a date','com.datamelt.rules.core.action.DateAction','addDays','add days',now()),"
    		+ "(43,'Subtract minutes from a date','com.datamelt.rules.core.action.DateAction','subtractMinutes','subtract minutes',now()),"
    		+ "(44,'Subtract hours from a date','com.datamelt.rules.core.action.DateAction','subtractHours','subtract hours',now()),"
    		+ "(45,'Subtract seconds from a date','com.datamelt.rules.core.action.DateAction','subtractSeconds','subtract seconds',now()),"
    		+ "(46,'Subtract days from a date','com.datamelt.rules.core.action.DateAction','subtractDays','subtract days',now()),"
    		+ "(47,'Replace value from mapping file','com.datamelt.rules.core.action.StringAction','replaceValueFromMap','replace value from map',now()),"
    		+ "(48,'Replace value from a list of values','com.datamelt.rules.core.action.StringAction','replaceValueFromList','replace value from list',now()),"
    		+ "(49,'Replace value with a mask character','com.datamelt.rules.core.action.StringAction','maskValue','mask value',now()),"
    		+ "(50,'Encrypt value using a key','com.datamelt.rules.core.action.StringAction','encryptValue','encrypt value',now()),"
    		+ "(51,'Decrypt value using a key','com.datamelt.rules.core.action.StringAction','decryptValue','decrypt value',now())";
    }
